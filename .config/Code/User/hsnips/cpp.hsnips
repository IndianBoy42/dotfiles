snippet linc "include local header" A
``rv = "#include \"" + path.replace(/^.*[\\\/\:]/, '').replace(/\..*/, '') + ".hpp\""``
endsnippet
snippet #inc A
#include $0
endsnippet
snippet headguard "header guard" b
#ifndef ``rv=path.replace(/^.*[\\\/\:]/, '').replace(/[\.-]/, '_').toUpperCase()``
#define ``rv=path.replace(/^.*[\\\/\:]/, '').replace(/[\.-]/, '_').toUpperCase()``

$0

#endif //``rv=path.replace(/^.*[\\\/\:]/, '').replace(/[\.-]/, '_').toUpperCase()``
endsnippet
snippet headclass "class header template" 
#pragma once

class ${1:``
  rv = path.replace(/^.*[\\\/\:]/, '').replace(/\..*/, '').replace(/[-_]/, '').replace(/(?:^\w|[A-Z]|\b\w)/g, word => word.toUpperCase()).replace(/\s+/g, '')
``}
{
public:
    $1();
    ~$1();

private:
    $0
};
endsnippet

snippet tp "template" A
template<typename ${0:T}>
endsnippet

snippet nrvo "named return value" A
${2:auto} ${1:res};
$
return $1;
endsnippet

snippet cref "const ref" Aw
const $0&
endsnippet
snippet const& "const ref" A
const $0&
endsnippet
snippet compt "static constexpr" bA
static constexpr ${2:auto} $1 = $0;
endsnippet
snippet rauto "const auto" bA
auto&& $1 = $0;
endsnippet
snippet auto "auto var" bA
auto $1 = $0;
endsnippet
snippet cauto "const auto" bA
const auto $1 = $0;
endsnippet
snippet cfn "auto function()" bA
/**
 * @brief a new const member function
 */
auto $1() const {
    $0
}
endsnippet
snippet fn "auto function()" bA
/**
 * @brief a new function
 */
auto $1() {
    $0
}
endsnippet

snippet forin "for auto : " bA
for (auto ${1:e} : $2) {
    $0
}
endsnippet
snippet forc "for const auto&" bA
for (const auto& ${1:e} : $2) {
    $0
}
endsnippet
snippet forr "for auto&&" bA
for (auto&& ${1:e} : $2) {
    $0
}
endsnippet

snippet iife " = ([&]{})()" A
([&]{
    $0
})()
endsnippet
snippet iifc " = ([&]{})()" A
([&]{
    ${2:auto} $1;
    $0;
    return $1;
})()
endsnippet

snippet clet "const auto v = ([&]{})()" bA
const auto $1 = ([&]{
    ${2:auto} $1;
    $0;
    return $1;
})();
endsnippet

snippet cstr "const char*" A
const char*
endsnippet
snippet str "std::string"
std::string ${1:var};
endsnippet
snippet sstr "std::string" A
std::string
endsnippet
snippet smap "std::map" A
std::map<${1:K}, ${2:V}>
endsnippet
snippet hashmap "std::unordered_map" A
std::unordered_map<${1:K}, ${2:V}>
endsnippet
snippet svec "std::vector" A
std::vector<${1:T}>
endsnippet
snippet vec "std::vector"
std::vector<${1:T}> ${0:v};
endsnippet
snippet sbox "std::unique_ptr" A
std::unique_ptr<${1:T}>
endsnippet
snippet make_box "std::unique_ptr" A
std::unique_ptr<${1:T}> $0 = make_unique<$1>();
endsnippet
snippet cout "std::cout" A
std::cout << $0;
endsnippet

snippet tnull "std::nullptr_t" A
std::nullptr_t
endsnippet
snippet null "nullptr" A
nullptr
endsnippet

snippet `vec(\w+)\[\]` "vector of T" A
std::vector<``rv=m[1]``>
endsnippet

snippet `(\w+)\.\.i` "iterator-pair" A
``rv=m[1]``.begin(), ``rv=m[1]``.end()
endsnippet

snippet `(\w+)\.\.erase` "erase-remove" A
``rv=m[1]``.erase(std::remove(``rv=m[1]``.begin(), ``rv=m[1]``.end(), ${0:erase}));
endsnippet
snippet `(\w+)\.\.erasif` "erase-removeif" A
``rv=m[1]``.erase(std::remove_if(``rv=m[1]``.begin(), ``rv=m[1]``.end(), [&](const auto& e){
    return ${0:false};
}));
endsnippet
snippet `(\w+)\.\.fill` "std::fill(range)" A
std::fill(``rv=m[1]``.begin(), ``rv=m[1]``.end(), $1);
endsnippet
snippet `(\w+)\.\.gen` "std::fill(range)" A
std::generate(``rv=m[1]``.begin(), ``rv=m[1]``.end(), [&]{
    return ${0:{}};
});
endsnippet
snippet `(\w+)\.\.sort` "std::sort(range)" A
std::sort(``rv=m[1]``.begin(), ``rv=m[1]``.end())
endsnippet
snippet `(\w+)\.\.map` "std::transform(range)" A
std::transform(``rv=m[1]``.begin(), ``rv=m[1]``.end(), $1.begin(), [&](const auto& e){
    return ${0:e};
})
endsnippet
snippet `(\w+)\.\.sum` "std::accumulate(range)" A
std::transform(``rv=m[1]``.begin(), ``rv=m[1]``.end(), ${1:{}})
endsnippet
snippet `(\w+)\.\.fold` "std::accumulate(range)" A
std::transform(``rv=m[1]``.begin(), ``rv=m[1]``.end(), ${1:{}}, [&](const auto& acc, const auto& e){
    return ${0:acc};
})
endsnippet
snippet `(\w+)\.\.filter` "std::copy_if(range)" A
std::copy_if(``rv=m[1]``.begin(), ``rv=m[1]``.end(), $1.begin(), [&](const auto& e){
    return ${0:true};
})
endsnippet

snippet stdsort "std::sort" A
std::sort($1.begin(), $1.end());
endsnippet
snippet stdfill "std::fill" A
std::fill($1.begin(), $1.end(), $2);
endsnippet
snippet stdgen "std::gen" A
std::gen($1.begin(), $1.end(), [&]{
    return ${0:{}};
});
endsnippet
snippet stdtran "std::transform" A
std::transform($1.begin(), $1.end(), $2.begin(), [&](const auto& e){
    return ${0:e};
});
endsnippet
snippet stdfilt "std::copy_if" A
std::copy_if($1.begin(), $1.end(), $2.begin(), [&](const auto& e){
    return ${0:true};
});
endsnippet
snippet `alg::(\w+)\s` "std::algorithm" A
std::``rv=m[1]``($1.begin(), $1.end());
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:filename}, ``rv='"r"'``)) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet `cin-(\w+);` "variables from stdin" bA
$0 ``rv=m[1]``;
cin >> ``rv=m[1]``;
endsnippet

snippet cudaKernel bA
template<typename T>
__global__ void ${1:kernel}(${2:T* buf}) {
    const size_t gidx = blockIdx.x * blockDim.x + threadIdx.x;
    const size_t gidy = blockIdx.y * blockDim.y + threadIdx.y;
    const size_t gidz = blockIdx.z * blockDim.z + threadIdx.z;

    $0
}
endsnippet
snippet cudaNew Ab
${1:T}* ${2:ptr};
cudaMallocManaged(&$2, sizeof($1) * ${3:1});
$0
cudaFree($2);
endsnippet
snippet __shared__ Ab
__shared__ ${1:T} $2[];
endsnippet
snippet cudtp Ab
template<typename T, size_t blockDimX, size_t blockDimY, size_t blockDimZ>
__global__ void ${1:cuda}(${2:T* buf}) {
    const size_t ${1:gidx} = blockIdx.x * blockDimX + threadIdx.x;
    const size_t ${1:gidy} = blockIdx.y * blockDimY + threadIdx.y;
    const size_t ${1:gidz} = blockIdx.z * blockDimZ + threadIdx.z;

    $0
}
endsnippet
snippet `const tgidx` Ab
const size_t gidx = blockIdx.x * blockDimX + threadIdx.x;

endsnippet
snippet `const tgidy` Ab
const size_t gidy = blockIdx.y * blockDimY + threadIdx.y;

endsnippet
snippet `const tgidz` Ab
const size_t gidz = blockIdx.z * blockDimZ + threadIdx.z;

endsnippet
snippet `const gidx` Ab
const size_t gidx = blockIdx.x * blockDim.x + threadIdx.x;

endsnippet
snippet `const gidy` Ab
const size_t gidy = blockIdx.y * blockDim.y + threadIdx.y;

endsnippet
snippet `const gidz` Ab
const size_t gidz = blockIdx.z * blockDim.z + threadIdx.z;

endsnippet
snippet bidx A
(blockIdx.x)
endsnippet
snippet bidy A
(blockIdx.y)
endsnippet
snippet bidz A
(blockIdx.z)
endsnippet
snippet tidx A
(threadIdx.x)
endsnippet
snippet tidy A
(threadIdx.y)
endsnippet
snippet tidz A
(threadIdx.z)
endsnippet
snippet dim3 A
dim3 gridSize($1);
dim3 blockSize($2);
endsnippet
snippet `(\w.*)<<<` Ab
{
    dim3 gridSize($1);
    dim3 blockSize($2);
    ``rv=m[1]``<<<gridSize, blockSize>>>($0);
}
endsnippet