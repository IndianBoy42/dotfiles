# don't suggest files right off
complete -c lets -n "__fish_is_first_arg" --no-files

# Complete subcommands
function __fish_lets_get_subcommands
    find ~/.letsfiles/ | grep 'just$' 
end
function __fish_lets_get_subcommand_name
    echo "$argv[1]" | sed 's/.*\///' | sed 's/\.just//' 
end
function __fish_lets_complete_subcommands
    __fish_lets_get_subcommands | sed 's/.*\///' | sed 's/\.just/\tLetsfile subcommand\n/'
end
complete -c lets -a '(__fish_lets_complete_subcommands)' -n "not __fish_is_first_arg" 

# complete recipes
function __fish_lets_complete_recipes
    just --justfile ~/.letsfiles/Justfile --summary 2> /dev/null | tr " " "\n" || echo ""
end
complete -c lets -a '(__fish_lets_complete_recipes)'

# TODO: how to complete subcommands
function __fish_lets_sub_complete_recipes
    just --justfile "$argv[1]" --summary 2> /dev/null | tr " " "\n" || echo ""
end
function __fish_lets_using_subcommand
    set arg (commandline -opc)[2]
    test "$arg" = "$argv[1]"
end
for subcommand in (string split '\n' (__fish_lets_get_subcommands))
    set name (__fish_lets_get_subcommand_name $subcommand)
    complete -n "__fish_lets_using_subcommand $name" -c "lets" -a "(__fish_lets_sub_complete_recipes $subcommand)"
end

# autogenerated completions
complete -c lets -n "__fish_use_subcommand" -l chooser -d 'Override binary invoked by `--choose`'
complete -c lets -n "__fish_use_subcommand" -l color -d 'Print colorful output' -r -f -a "auto always never"
complete -c lets -n "__fish_use_subcommand" -l list-heading -d 'Print <TEXT> before list'
complete -c lets -n "__fish_use_subcommand" -l list-prefix -d 'Print <TEXT> before each list item'
complete -c lets -n "__fish_use_subcommand" -l set -d 'Override <VARIABLE> with <VALUE>'
complete -c lets -n "__fish_use_subcommand" -l shell -d 'Invoke <SHELL> to run recipes'
complete -c lets -n "__fish_use_subcommand" -l shell-arg -d 'Invoke shell with <SHELL-ARG> as an argument'
complete -c lets -n "__fish_use_subcommand" -s d -l working-directory -d 'Use <WORKING-DIRECTORY> as working directory.'
complete -c lets -n "__fish_use_subcommand" -s c -l command -d 'Run an arbitrary command with the working directory, `.env`, overrides, and exports set'
complete -c lets -n "__fish_use_subcommand" -l completions -d 'Print shell completion script for <SHELL>' -r -f -a "zsh bash fish powershell elvish"
complete -c lets -n "__fish_use_subcommand" -s s -l show -d 'Show information about <RECIPE>'
complete -c lets -n "__fish_use_subcommand" -l dry-run -d 'Print what lets would do without doing it'
complete -c lets -n "__fish_use_subcommand" -l highlight -d 'Highlight echoed recipe lines in bold'
complete -c lets -n "__fish_use_subcommand" -l no-dotenv -d 'Don\'t load `.env` file'
complete -c lets -n "__fish_use_subcommand" -l no-highlight -d 'Don\'t highlight echoed recipe lines in bold'
complete -c lets -n "__fish_use_subcommand" -s q -l quiet -d 'Suppress all output'
complete -c lets -n "__fish_use_subcommand" -l shell-command -d 'Invoke <COMMAND> with the shell used to run recipe lines and backticks'
complete -c lets -n "__fish_use_subcommand" -l clear-shell-args -d 'Clear shell arguments'
complete -c lets -n "__fish_use_subcommand" -s u -l unsorted -d 'Return list and summary entries in source order'
complete -c lets -n "__fish_use_subcommand" -s v -l verbose -d 'Use verbose output'
complete -c lets -n "__fish_use_subcommand" -l choose -d 'Select one or more recipes to run using a binary. If `--chooser` is not passed the chooser defaults to the value of $JUST_CHOOSER, falling back to `fzf`'
complete -c lets -n "__fish_use_subcommand" -l dump -d 'Print entire justfile'
complete -c lets -n "__fish_use_subcommand" -s e -l edit -d 'Edit justfile with editor given by $VISUAL or $EDITOR, falling back to `vim`'
complete -c lets -n "__fish_use_subcommand" -l evaluate -d 'Evaluate and print all variables. If a variable name is given as an argument, only print that variable\'s value.'
# complete -c lets -n "__fish_use_subcommand" -l init -d 'Initialize new justfile in project root'
complete -c lets -n "__fish_use_subcommand" -s l -l list -d 'List available recipes and their arguments'
complete -c lets -n "__fish_use_subcommand" -l summary -d 'List names of available recipes'
complete -c lets -n "__fish_use_subcommand" -l variables -d 'List names of variables'
complete -c lets -n "__fish_use_subcommand" -s h -l help -d 'Print help information'
complete -c lets -n "__fish_use_subcommand" -s V -l version -d 'Print version information'
