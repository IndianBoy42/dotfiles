snippet template A
cmake_minimum_required(VERSION 3.19)

# set(CMAKE_BUILD_TYPE Release)
option(USE_LTO ``rv='"'``Use LTO``rv='"'`` OFF)
option(OPT_NATIVE ``rv='"'``Use target native for optimization``rv='"'`` ON)

project(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``})
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_EXTENSIONS ON)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED True)
set(CMAKE_C_EXTENSIONS ON)

add_executable($1)

if(USE_LTO)
    target_compile_options($1 PRIVATE -flto)
endif(USE_LTO)

if(OPT_NATIVE)
    target_compile_options($1 PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-march=native -mtune=native -mavx -mavx2>)
    target_compile_options($1 PRIVATE $<$<COMPILE_LANGUAGE:C>:-march=native -mtune=native -mavx -mavx2>)
endif(OPT_NATIVE)

$0

endsnippet

snippet exe Ab
add_executable(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} $0)

if(USE_LTO)
    target_compile_options($1 PRIVATE -flto)
endif(USE_LTO)

if(OPT_NATIVE)
    target_compile_options($1 PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-march=native -mtune=native -mavx -mavx2>)
    target_compile_options($1 PRIVATE $<$<COMPILE_LANGUAGE:C>:-march=native -mtune=native -mavx -mavx2>)
endif(OPT_NATIVE)

inc
dep
src
endsnippet

snippet encuda bA
enable_language(CUDA)
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED True)
set(CMAKE_CUDA_EXTENSIONS ON)
set(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCHITECTURE_VERSIONS})
target_include_directories(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} PUBLIC ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})

endsnippet
snippet enispc bA
enable_language(ISPC)

endsnippet

snippet `([\w_]+)\.\.v` "suffix for variable names" A
\${``rv=m[1]``} $0
endsnippet

snippet `cmd;` Ab
add_custom_command(${1:cmd} $0)

endsnippet
snippet `(\w+)\.\.cmd` Ab
add_custom_command(``rv=m[1]`` $0)

endsnippet
snippet `tar;` Ab
add_custom_target(${0:target} ${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``})

endsnippet
snippet `(\w+)\.\.tar` Ab
add_custom_target(``rv=m[1]`` ${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``})

endsnippet
snippet `glob;` Ab
file(GLOB ${2:SRCS} ${0:*.c*})
target_sources(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} PUBLIC $2)

endsnippet
snippet `(\w+)\.\.glob` Ab
file(GLOB ``rv=m[1]`` ${0:*.c*}) 
target_sources(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} PUBLIC ``rv=m[1]``)

endsnippet
snippet `src;` Ab
target_sources(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} PUBLIC ${0:main.cpp})

endsnippet
snippet `(\w+)\.\.src` Ab
target_sources(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} PUBLIC ``rv=m[1]``)

endsnippet
snippet `inc;` Ab
target_include_directories(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} PUBLIC ${0:./})

endsnippet
snippet `(\w+)\.\.inc` Ab
target_include_directories(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} PUBLIC ``rv=m[1]``)

endsnippet
snippet `dep;` Ab
find_package(${0:library})
target_link_libraries(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} $0)

endsnippet
snippet `(\w+)\.\.dep` Ab
find_package(``rv=m[1]``)
target_link_libraries(${1:``rv=path.replace(/\/CMakeLists\.txt/,'').replace(/^.*[\\\/\:]/, '')``} ``rv=m[1]``)

endsnippet
snippet fn Ab
function($1 $2)
$0
endfunction($1)

endsnippet
snippet if Ab
if($1)
$0
else($1)
endif($1)

endsnippet
snippet `(\w+)\s*=\s*(\w+);` Ab
set(``rv=m[1]`` ``rv=m[2]``)

endsnippet
snippet sub Ab
add_subdirectory(${0:src})
endsnippet